name: Build and Release macOS

on:
  workflow_run:
    workflows: ['Build and Release AppImages']
    types:
      - completed
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for changelog generation

      - name: Install Dependencies
        run: |
          brew install imagemagick zip jq

      - name: Set Executable Permissions
        run: |
          chmod +x compile_macos.sh install_scripts_macos.sh install_macos.sh

      - name: Build macOS Package
        run: ./compile_macos.sh

      - name: Set Permissions for Generated Files
        run: |
          chmod +x Scripts/*.sh

      - name: Package Release Artifacts
        run: |
          mkdir -p release_package/Scripts
          cp install_scripts_macos.sh release_package/
          cp install_macos.sh release_package/
          cp -r Scripts/ release_package/
          cd release_package
          zip -r ../hypr_installer_macos.zip .

      - name: Retrieve Short Git SHA
        id: slug
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --always HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          else
            CHANGES=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Get Latest Release
        id: latest_release
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('release_id', response.data.id);
            core.setOutput('upload_url', response.data.upload_url);

      - name: Upload Assets
        run: |
          # Upload Scripts
          for script in Scripts/*.sh; do
            SCRIPT_NAME=$(basename "$script")
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: text/x-shellscript" \
              --data-binary @"$script" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.latest_release.outputs.release_id }}/assets?name=$SCRIPT_NAME"
          done

          # Upload .app files
          for app in Compiled/*.app; do
            if [ -d "$app" ]; then
              APP_NAME=$(basename "$app")
              zip -r "${APP_NAME}.zip" "$app"
              curl -L \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/zip" \
                --data-binary @"${APP_NAME}.zip" \
                "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.latest_release.outputs.release_id }}/assets?name=${APP_NAME}.zip"
            fi
          done

          # Upload installer package
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @"hypr_installer_macos.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.latest_release.outputs.release_id }}/assets?name=hypr_installer_macos.zip"