name: Build and Release AppImages

on:
  workflow_dispatch:
  push:
    paths:
      - 'Scripts/**'
      - 'HyprUpld.png'
      - 'compile.sh'
      - 'install_scripts.sh'
      - 'compile_macos.sh'
      - 'install_scripts_macos.sh'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required for changelog generation

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget fuse build-essential cmake \
                                  libglib2.0-dev libcairo2-dev libpango1.0-dev \
                                  imagemagick zip jq

      - name: Set Executable Permissions
        run: |
          chmod +x compile.sh install_scripts.sh

      - name: Build AppImage
        run: ./compile.sh

      - name: Set Permissions for Generated Files
        run: |
          chmod +x Compiled/*.AppImage
          chmod +x Scripts/*.sh

      - name: Package Release Artifacts
        run: |
          mkdir -p release_package/Compiled
          cp Compiled/*.AppImage release_package/Compiled/
          cp install_scripts.sh release_package/
          cp -r Scripts/ release_package/
          cd release_package
          zip -r ../hypr_installer.zip .

      - name: Retrieve Short Git SHA
        id: slug
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --always HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "changelog=Initial release" >> $GITHUB_OUTPUT
          else
            CHANGES=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Get Short SHA
        id: sha
        run: echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Check Existing Release
        id: check_release
        run: |
          # Try to get the release by tag
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.sha.outputs.sha }}")
          
          if [ "$STATUS" -eq "200" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            # Get release ID for the existing release
            RELEASE_ID=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.sha.outputs.sha }}" \
              | jq -r .id)
            echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create New Release
        id: create_release
        if: steps.check_release.outputs.exists != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.sha.outputs.sha }}
          release_name: Release ${{ steps.sha.outputs.sha }}
          body: |
            ${{ steps.changelog.outputs.changelog }}

            ### Included in this release:
            - Individual AppImages (Compiled directory)
            - Individual script files (Scripts directory)
            - Complete installation package (hypr_installer.zip)
          draft: false
          prerelease: false

      - name: Upload Assets to Existing Release
        if: steps.check_release.outputs.exists == 'true'
        run: |
          # Upload AppImages
          for appimage in Compiled/*.AppImage; do
            APPIMAGE_NAME=$(basename "$appimage")
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/x-executable" \
              --data-binary @"$appimage" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}/assets?name=$APPIMAGE_NAME"
          done

          # Upload Scripts
          for script in Scripts/*.sh; do
            SCRIPT_NAME=$(basename "$script")
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: text/x-shellscript" \
              --data-binary @"$script" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}/assets?name=$SCRIPT_NAME"
          done

          # Upload installer package
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @"hypr_installer.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}/assets?name=hypr_installer.zip"

      - name: Upload Assets to New Release
        if: steps.check_release.outputs.exists != 'true'
        run: |
          # Upload AppImages
          for appimage in Compiled/*.AppImage; do
            APPIMAGE_NAME=$(basename "$appimage")
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/x-executable" \
              --data-binary @"$appimage" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$APPIMAGE_NAME"
          done

          # Upload Scripts
          for script in Scripts/*.sh; do
            SCRIPT_NAME=$(basename "$script")
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: text/x-shellscript" \
              --data-binary @"$script" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$SCRIPT_NAME"
          done

          # Upload installer package
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @"hypr_installer.zip" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=hypr_installer.zip"
